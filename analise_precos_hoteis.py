# -*- coding: utf-8 -*-
"""analise_precos_hoteis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w3KB-Y1bHI--hHubOV1z9eiRmA6qmjbk

# üìä An√°lise e Predi√ß√£o de Pre√ßos de Hot√©is
**Autor:** [Seu Nome]
**Ferramentas:** Python, Pandas, Seaborn, Statsmodels, Plotly, Sklearn
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import statsmodels.api as sm
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

def carregar_dados(caminho):
    df = pd.read_csv(caminho)
    print(df.info())
    print(df.describe())
    print(df.isnull().sum())
    return df

def analisar_dados(df):
    corr = df.corr()
    print("Correla√ß√£o com Pre√ßo:\n", corr["Preco"])

def visualizar_dados(df):
    sns.pairplot(df, y_vars="Preco")
    sns.pairplot(df, x_vars="ProximidadeTurismo", y_vars="Preco", height=5)
    plt.xlabel("Dist√¢ncia do Turismo")
    plt.ylabel("Pre√ßo")
    px.scatter(df, x="ProximidadeTurismo", y="Preco", trendline="ols", trendline_color_override="red").show()

def treinar_modelo(x, y, variaveis):
    x = sm.add_constant(x)
    modelo = sm.OLS(y, x[["const"] + variaveis]).fit()
    print(modelo.summary())
    print("R¬≤:", modelo.rsquared)
    return modelo

def avaliar_residuos(modelo):
    plt.hist(modelo.resid)
    plt.xlabel("Res√≠duos")
    plt.ylabel("Frequ√™ncia")
    plt.title("Histograma dos Res√≠duos")
    plt.show()

def avaliar_modelo(modelo, x_test, y_test):
    x_test = sm.add_constant(x_test)
    pred = modelo.predict(x_test[modelo.params.index])
    print("R¬≤ de Teste:", r2_score(y_test, pred))
    return pred

def prever_novos_dados(modelo):
    novos_hoteis = pd.DataFrame({
        "Estrelas": [3, 5, 2, 4, 4, 3, 1, 5, 2, 4],
        "ProximidadeTurismo": [12.58, 2.34, 7.67, 10.23, 3.45, 15.33, 9.87, 4.12, 13.56, 6.78],
        "Capacidade": [2, 4, 3, 3, 1, 4, 2, 3, 3, 2]
    })
    novos_hoteis = sm.add_constant(novos_hoteis)
    pred = modelo.predict(novos_hoteis[modelo.params.index])
    print("Previs√µes para novos hot√©is:\n", pred)

# Caminho do arquivo CSV
df = carregar_dados("hoteis.csv")

# An√°lise e visualiza√ß√£o
analisar_dados(df)
visualizar_dados(df)

# Preparar dados para modelagem
x = df[['Estrelas', 'ProximidadeTurismo', 'Capacidade']]
y = df['Preco']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Treinar modelos
modelo1 = treinar_modelo(x_train, y_train, ["ProximidadeTurismo"])
modelo2 = treinar_modelo(x_train, y_train, ["Capacidade", "ProximidadeTurismo"])
modelo3 = treinar_modelo(x_train, y_train, ["Estrelas", "Capacidade", "ProximidadeTurismo"])

# Avalia√ß√£o final
avaliar_residuos(modelo3)
avaliar_modelo(modelo3, x_test, y_test)
prever_novos_dados(modelo3)